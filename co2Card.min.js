class CustomCo2Card extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
  }

  setConfig(config) {
    if (!config.entity) {
        throw new Error('You need to define CO2 sensor entity.');
    } else if (!config.entity_ppfd) {
      throw new Error('You need to define "entity_ppfd" (Light Intensity).');
    } else if (!config.rangeGreen) {
        throw new Error('You need to define "rangeGreen",')
    } else if (!config.rangeYellow) {
        throw new Error('You need to define "rangeYellow",')
    }

    // Default thresholds and colors
    this.config = {
      colorSteps: [
        { diff: rangeGreen, hue: '120deg', gradient: 'linear-gradient(145deg, #00FF00, #008800)' }, // Green
        { diff: rangeYellow, hue: '60deg', gradient: 'linear-gradient(145deg, #FFFF00, #FFA500)' }, // Yellow
        { diff: Infinity, hue: '0deg', gradient: 'linear-gradient(145deg, #FF0000, #B00000)' }, // Red
      ],
      ...config, // Allow overriding through configuration
    };

    const theme = config.theme || {};
    const bgColor = theme.bgColor || "#2c2c2e";
    const textColor = theme.textColor || "#fff";
    const textColorBubble = theme.textColorBubble || "#fff";
    const iconColor = theme.iconColor || "#ff9e32";

    // Main Card Container
    const card = document.createElement('div');
    card.style.display = 'flex';
    card.style.flexDirection = 'column';
    card.style.alignItems = 'center';
    card.style.justifyContent = 'center';
    card.style.padding = '5px';
    card.style.backgroundColor = bgColor;
    card.style.borderRadius = '12px';
    card.style.color = textColor;
    card.style.fontFamily = 'Arial, sans-serif';
    card.style.boxShadow = '0 4px 10px rgba(0, 0, 0, 0.4)';
    card.style.width = '100%';
    card.style.maxWidth = '300px'; // Limit width to prevent overflow
    card.style.boxSizing = 'border-box';
    card.style.textAlign = 'center';

    // Image Container
    const imageContainer = document.createElement('div');
    imageContainer.style.position = 'relative';
    imageContainer.style.width = '80px';
    imageContainer.style.height = '80px';
    imageContainer.style.marginBottom = '10px';
    imageContainer.style.marginTop = '-5px';

    // Grayscale SVG Image with Shadow
    const co2Image = document.createElement('img');
    co2Image.src = '/hacsfiles/co2Card/assets/co2CardImage.svg';
    co2Image.alt = 'CO2';
    co2Image.style.width = '100%';
    co2Image.style.height = '100%';
    co2Image.style.objectFit = 'contain';
    co2Image.style.filter = 'drop-shadow(0 6px 12px rgba(0, 0, 0, 0.3)) drop-shadow(0 8px 16px rgba(0, 0, 0, 0.2))';

    // Overlay for Dynamic Main Bubble Coloring with Gradient
    const bubbleOverlay = document.createElement('div');
    bubbleOverlay.style.position = 'absolute';
    bubbleOverlay.style.width = '52px'; // Updated to exactly cover the main bubble
    bubbleOverlay.style.height = '52px';
    bubbleOverlay.style.borderRadius = '50%';
    bubbleOverlay.style.transform = 'translate(-50%, -50%)'; // Ensure proper centering
    bubbleOverlay.style.top = '50%'; // Dynamically centers the overlay
    bubbleOverlay.style.left = '50%';
    bubbleOverlay.style.zIndex = '1'; // Ensure it sits above the SVG image

    // Default Gradient Color
    bubbleOverlay.style.background = 'linear-gradient(145deg, #4A90E2, #357ABD)'; // Subtle gradient for blue

    // Text Overlay for "CO²" (Preserved from SVG)
    const textOverlay = document.createElement('div');
    textOverlay.textContent = 'CO²'; // Updated text content
    textOverlay.style.position = 'absolute';
    textOverlay.style.top = '50%';
    textOverlay.style.left = '50%';
    textOverlay.style.transform = 'translate(-50%, -50%)';
    textOverlay.style.color = textColorBubble;
    textOverlay.style.fontWeight = 'bold';
    textOverlay.style.fontSize = '18px'; // Updated font size
    textOverlay.style.zIndex = '2'; // Ensure it sits above the color overlay

    // Append elements to the image container
    imageContainer.appendChild(co2Image);
    imageContainer.appendChild(bubbleOverlay);
    imageContainer.appendChild(textOverlay);

    // Value Container
    const valueContainer = document.createElement('div');
    valueContainer.style.textAlign = 'center';
    valueContainer.style.marginTop = '1px';

    // CO2 Value
    const co2Value = document.createElement('div');
    co2Value.style.fontSize = '18px';
    co2Value.style.marginBottom = '6px';
    co2Value.textContent = '0 ppm';

    // PPFD Container (Icon + Value)
    const ppfdContainer = document.createElement('div');
    ppfdContainer.style.display = 'flex';
    ppfdContainer.style.alignItems = 'center';
    ppfdContainer.style.justifyContent = 'center';
    ppfdContainer.style.gap = '6px';

    // PPFD Value
    const ppfdValue = document.createElement('span');
    ppfdValue.textContent = '0 μmol/m²/s';
    ppfdValue.style.fontSize = '12px'; // Font size explicitly set here
    ppfdValue.style.marginTop = '-5px';

    // mdi:ceiling-fan-light Icon
    const lampIcon = document.createElement('div');
    lampIcon.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" width="14px" height="14px" viewBox="0 0 24 24">
      <path fill="${iconColor}" d="M8 3v2h3v5.27c-.62.36-1 1.02-1 1.73v1h4v-1c0-.71-.38-1.37-1-1.73V5h3V3zm-2 9c-2.21 0-4 .67-4 1.5S3.79 15 6 15s4-.67 4-1.5S8.21 12 6 12m12 0c-2.21 0-4 .67-4 1.5s1.79 1.5 4 1.5s4-.67 4-1.5s-1.79-1.5-4-1.5m-8 2v1c0 .72.38 1.38 1 1.73c.62.36 1.38.36 2 0c.62-.35 1-1.02 1-1.73v-1zm3 5v3h-2v-3zm2.88-2.54L18 18.59L16.59 20l-2.12-2.12zm-6.34 1.42L7.41 20L6 18.59l2.12-2.12z"/>
      </svg>
    `;

    // Append PPFD Elements
    ppfdContainer.appendChild(lampIcon);
    ppfdContainer.appendChild(ppfdValue);

    // Append All Elements to the Card
    valueContainer.appendChild(co2Value);
    valueContainer.appendChild(ppfdContainer);
    card.appendChild(imageContainer);
    card.appendChild(valueContainer);
    this.shadowRoot.appendChild(card);

    // Save references for updates
    this.co2Value = co2Value;
    this.ppfdValue = ppfdValue;
    this.bubbleOverlay = bubbleOverlay;

 }

 set hass(hass) {
  const entity = this.config.entity;
  const entityPpfd = this.config.entity_ppfd; // Correctly fetch the PPFD entity from the config

  const state = hass.states[entity];
  const statePpfd = hass.states[entityPpfd];

  if (!state || !statePpfd) {
    return;
  }

  const co2Value = parseFloat(state.state);
  const ppfdValue = parseFloat(statePpfd.state); // Retrieve correct PPFD value

  // Calculate the relative time
  const lastUpdated = new Date(state.last_updated);
  const now = new Date();
  const secondsAgo = Math.round((now - lastUpdated) / 1000);
  const relativeTime = CustomCo2Card.formatRelativeTime(secondsAgo);

// Update CO2 Value Display
this.co2Value.innerHTML = `
  <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; gap: 2px; margin-top: -5px;">
    <a href="#" style="text-decoration: none; color: inherit;"
       onmouseover="this.style.color='#ff9e32'"
       onmouseout="this.style.color='inherit'"
       onclick="event.preventDefault(); this.dispatchEvent(new CustomEvent('hass-more-info', { bubbles: true, composed: true, detail: { entityId: '${entity}' } }));">
      <div style="display: flex; justify-content: center; align-items: center; gap: 6px;">
        <span>${co2Value} ppm</span>
      </div>
    </a>
    <small style="color: #aaa; font-size: 10px; margin-top: -5px;">${relativeTime}</small>
  </div>
`;

// Update PPFD Value Display
this.ppfdValue.innerHTML = `
  <a href="#" style="text-decoration: none; color: inherit;"
     onmouseover="this.style.color='#ff9e32'"
     onmouseout="this.style.color='inherit'"
     onclick="event.preventDefault(); this.dispatchEvent(new CustomEvent('hass-more-info', { bubbles: true, composed: true, detail: { entityId: '${entityPpfd}' } }));">
    <div style="display: flex; align-items: center; gap: 6px;">
      <span>${ppfdValue} μmol/m²/s</span>
    </div>
  </a>
`;

  // Calculate the bubble's color based on CO₂ and PPFD ranges
  const gradient = this.calculateFillColor(ppfdValue, co2Value);

  // Apply the calculated gradient to the bubble overlay
  this.bubbleOverlay.style.background = gradient;
}

// Static helper function to format relative time
static formatRelativeTime(seconds) {
  const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });

  if (seconds < 60) {
    return rtf.format(-seconds, 'second');
  } else if (seconds < 3600) {
    return rtf.format(-Math.floor(seconds / 60), 'minute');
  } else if (seconds < 86400) {
    return rtf.format(-Math.floor(seconds / 3600), 'hour');
  } else {
    return rtf.format(-Math.floor(seconds / 86400), 'day');
  }
}

  calculateFillColor(co2, ppfd) {
    const ranges = [
      { ppfdMin: 200, ppfdMax: 450, co2Ideal: 400 },
      { ppfdMin: 450, ppfdMax: 800, co2Ideal: 800 },
      { ppfdMin: 800, ppfdMax: 1000, co2Ideal: 1400 },
      { ppfdMin: 1000, ppfdMax: 1400, co2Ideal: 1600 },
    ];

    const co2Value = parseFloat(co2);
    const ppfdValue = parseFloat(ppfd);

    const clampedPpfdValue = Math.max(200, Math.min(1400, ppfdValue));

    for (const range of ranges) {
      if (clampedPpfdValue >= range.ppfdMin && clampedPpfdValue <= range.ppfdMax) {
        const co2Ideal = range.co2Ideal;
        const diff = co2Value - co2Ideal;
        const absDiff = Math.abs(diff);

        if (absDiff <= 100) {
          return 'linear-gradient(145deg, #00FF00, #008800)'; // Green gradient
        } else if (absDiff <= 200) {
          return 'linear-gradient(145deg, #FFFF00, #FFA500)'; // Yellow gradient
        } else {
          return 'linear-gradient(145deg, #FF0000, #B00000)'; // Red gradient
        }
      }
    }

    return 'linear-gradient(145deg, #00FF00, #008800)'; // Default green gradient
  }
}

customElements.define('co2-card', CustomCo2Card);
